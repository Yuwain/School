
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Mar 15 12:39:27 EDT 2013
//----------------------------------------------------

import java.io.*;

/** CUP v0.10k generated parser.
  * @version Fri Mar 15 12:39:27 EDT 2013
  */
public class A3Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public A3Parser() {super();}

  /** Constructor which sets the default scanner. */
  public A3Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\003\003\000\002\002\004\000\002\003" +
    "\004\000\002\004\011\000\002\004\010\000\002\005\002" +
    "\000\002\005\003\000\002\005\005\000\002\006\004\000" +
    "\002\007\003\000\002\007\003\000\002\010\005\000\002" +
    "\010\004\000\002\011\003\000\002\011\004\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\013\005\000\002\014\006\000\002\015\005\000\002" +
    "\016\007\000\002\016\011\000\002\017\011\000\002\020" +
    "\011\000\002\021\003\000\002\021\005\000\002\021\005" +
    "\000\002\022\003\000\002\022\005\000\002\022\005\000" +
    "\002\023\003\000\002\023\003\000\002\023\005\000\002" +
    "\023\006\000\002\023\005\000\002\024\005\000\002\024" +
    "\005\000\002\025\003\000\002\025\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\006\016\010\017\006\001\002\000\004\002" +
    "\141\001\002\000\006\005\013\015\012\001\002\000\006" +
    "\005\ufff7\015\ufff7\001\002\000\010\002\001\016\010\017" +
    "\006\001\002\000\006\005\ufff8\015\ufff8\001\002\000\004" +
    "\002\uffff\001\002\000\004\005\134\001\002\000\004\022" +
    "\014\001\002\000\010\016\010\017\006\023\ufffc\001\002" +
    "\000\004\005\133\001\002\000\006\021\131\023\ufffb\001" +
    "\002\000\004\023\020\001\002\000\004\013\022\001\002" +
    "\000\010\002\ufffd\016\ufffd\017\ufffd\001\002\000\024\005" +
    "\033\006\034\010\035\011\024\012\032\013\022\014\031" +
    "\016\010\017\006\001\002\000\026\005\uffef\006\uffef\007" +
    "\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef\016\uffef" +
    "\017\uffef\001\002\000\004\022\123\001\002\000\026\005" +
    "\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1" +
    "\014\ufff1\016\ufff1\017\ufff1\001\002\000\026\005\uffec\006" +
    "\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec" +
    "\016\uffec\017\uffec\001\002\000\026\005\ufff0\006\ufff0\007" +
    "\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\016\ufff0" +
    "\017\ufff0\001\002\000\004\014\122\001\002\000\030\002" +
    "\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5" +
    "\013\ufff5\014\ufff5\016\ufff5\017\ufff5\001\002\000\010\005" +
    "\051\022\054\033\047\001\002\000\004\030\115\001\002" +
    "\000\004\022\102\001\002\000\004\022\046\001\002\000" +
    "\004\005\044\001\002\000\026\005\ufff2\006\ufff2\007\ufff2" +
    "\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\016\ufff2\017" +
    "\ufff2\001\002\000\026\005\uffed\006\uffed\007\uffed\010\uffed" +
    "\011\uffed\012\uffed\013\uffed\014\uffed\016\uffed\017\uffed\001" +
    "\002\000\024\005\033\006\034\010\035\011\024\012\032" +
    "\013\022\014\ufff4\016\010\017\006\001\002\000\026\005" +
    "\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee" +
    "\014\uffee\016\uffee\017\uffee\001\002\000\004\014\ufff3\001" +
    "\002\000\004\020\045\001\002\000\026\005\uffeb\006\uffeb" +
    "\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\016" +
    "\uffeb\017\uffeb\001\002\000\010\005\051\022\054\033\047" +
    "\001\002\000\024\020\uffde\021\uffde\023\uffde\024\uffde\025" +
    "\uffde\026\uffde\027\uffde\031\uffde\032\uffde\001\002\000\004" +
    "\021\076\001\002\000\026\020\uffdd\021\uffdd\022\067\023" +
    "\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\031\uffdd\032\uffdd" +
    "\001\002\000\020\020\uffe4\021\uffe4\023\uffe4\024\063\025" +
    "\064\031\uffe4\032\uffe4\001\002\000\024\020\uffe1\021\uffe1" +
    "\023\uffe1\024\uffe1\025\uffe1\026\060\027\057\031\uffe1\032" +
    "\uffe1\001\002\000\010\005\051\022\054\033\047\001\002" +
    "\000\004\023\056\001\002\000\024\020\uffdc\021\uffdc\023" +
    "\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\031\uffdc\032\uffdc" +
    "\001\002\000\010\005\051\022\054\033\047\001\002\000" +
    "\010\005\051\022\054\033\047\001\002\000\020\020\uffe0" +
    "\021\uffe0\023\uffe0\024\uffe0\025\uffe0\031\uffe0\032\uffe0\001" +
    "\002\000\020\020\uffdf\021\uffdf\023\uffdf\024\uffdf\025\uffdf" +
    "\031\uffdf\032\uffdf\001\002\000\010\005\051\022\054\033" +
    "\047\001\002\000\010\005\051\022\054\033\047\001\002" +
    "\000\014\020\uffe2\021\uffe2\023\uffe2\031\uffe2\032\uffe2\001" +
    "\002\000\014\020\uffe3\021\uffe3\023\uffe3\031\uffe3\032\uffe3" +
    "\001\002\000\012\005\051\022\054\023\070\033\047\001" +
    "\002\000\024\020\uffda\021\uffda\023\uffda\024\uffda\025\uffda" +
    "\026\uffda\027\uffda\031\uffda\032\uffda\001\002\000\006\021" +
    "\074\023\uffd7\001\002\000\004\023\073\001\002\000\024" +
    "\020\uffdb\021\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027" +
    "\uffdb\031\uffdb\032\uffdb\001\002\000\010\005\051\022\054" +
    "\033\047\001\002\000\004\023\uffd6\001\002\000\004\004" +
    "\077\001\002\000\004\023\100\001\002\000\004\020\101" +
    "\001\002\000\026\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\016\uffe6\017\uffe6\001\002" +
    "\000\010\005\051\022\054\033\047\001\002\000\006\031" +
    "\111\032\112\001\002\000\004\023\105\001\002\000\022" +
    "\005\033\006\034\010\035\011\024\012\032\013\022\016" +
    "\010\017\006\001\002\000\026\005\uffe8\006\uffe8\007\107" +
    "\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\016\uffe8\017" +
    "\uffe8\001\002\000\022\005\033\006\034\010\035\011\024" +
    "\012\032\013\022\016\010\017\006\001\002\000\026\005" +
    "\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7" +
    "\014\uffe7\016\uffe7\017\uffe7\001\002\000\010\005\051\022" +
    "\054\033\047\001\002\000\010\005\051\022\054\033\047" +
    "\001\002\000\004\023\uffd8\001\002\000\004\023\uffd9\001" +
    "\002\000\010\005\051\022\054\033\047\001\002\000\004" +
    "\020\117\001\002\000\026\005\uffea\006\uffea\007\uffea\010" +
    "\uffea\011\uffea\012\uffea\013\uffea\014\uffea\016\uffea\017\uffea" +
    "\001\002\000\004\020\121\001\002\000\026\005\uffe9\006" +
    "\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9" +
    "\016\uffe9\017\uffe9\001\002\000\030\002\ufff6\005\ufff6\006" +
    "\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6" +
    "\016\ufff6\017\ufff6\001\002\000\004\005\124\001\002\000" +
    "\004\021\125\001\002\000\004\004\126\001\002\000\004" +
    "\023\127\001\002\000\004\020\130\001\002\000\026\005" +
    "\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5" +
    "\014\uffe5\016\uffe5\017\uffe5\001\002\000\010\016\010\017" +
    "\006\023\ufffc\001\002\000\004\023\ufffa\001\002\000\006" +
    "\021\ufff9\023\ufff9\001\002\000\004\022\135\001\002\000" +
    "\010\016\010\017\006\023\ufffc\001\002\000\004\023\137" +
    "\001\002\000\004\013\022\001\002\000\010\002\ufffe\016" +
    "\ufffe\017\ufffe\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\010\003\003\004\006\007\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\010\004\006\007\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\016\006\015\007\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\020\001\001" +
    "\000\002\001\001\000\026\007\035\010\036\011\027\012" +
    "\040\013\024\014\026\015\022\016\041\017\037\020\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\021\117\022\051\023\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\007\035\010\036\011\042\012\040\013\024\014\026" +
    "\015\022\016\041\017\037\020\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\021\047\022\051\023\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\021\054\022\051\023\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\061" +
    "\023\052\001\001\000\006\022\060\023\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\021\065\022\051" +
    "\023\052\001\001\000\010\021\064\022\051\023\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\021\070" +
    "\022\051\023\052\025\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\021\070\022\051\023\052\025\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\021\102\022\051\023\052\024" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\007\035\010\036\012\105\013\024\014\026\015\022\016" +
    "\041\017\037\020\025\001\001\000\002\001\001\000\024" +
    "\007\035\010\036\012\107\013\024\014\026\015\022\016" +
    "\041\017\037\020\025\001\001\000\002\001\001\000\010" +
    "\021\113\022\051\023\052\001\001\000\010\021\112\022" +
    "\051\023\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\021\115\022\051\023\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\131\006\015\007\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\135\006\015\007\014\001\001\000\002\001\001\000" +
    "\004\010\137\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$A3Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$A3Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$A3Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$A3Parser$actions {
  private final A3Parser parser;

  /** Constructor */
  CUP$A3Parser$actions(A3Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$A3Parser$do_action(
    int                        CUP$A3Parser$act_num,
    java_cup.runtime.lr_parser CUP$A3Parser$parser,
    java.util.Stack            CUP$A3Parser$stack,
    int                        CUP$A3Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$A3Parser$result;

      /* select the action based on the action number */
      switch (CUP$A3Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ActualParams ::= Expression COMMA ActualParams 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(19/*ActualParams*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ActualParams ::= Expression 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(19/*ActualParams*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BoolExpression ::= Expression NEQUAL Expression 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(18/*BoolExpression*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BoolExpression ::= Expression EEQUAL Expression 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(18/*BoolExpression*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PrimaryExpr ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(17/*PrimaryExpr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PrimaryExpr ::= IDENTIFIER LPAREN ActualParams RPAREN 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(17/*PrimaryExpr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PrimaryExpr ::= LPAREN Expression RPAREN 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(17/*PrimaryExpr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PrimaryExpr ::= IDENTIFIER 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(17/*PrimaryExpr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PrimaryExpr ::= NUMBER 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(17/*PrimaryExpr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MultExpr ::= PrimaryExpr DIVIDE MultExpr 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(16/*MultExpr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MultExpr ::= PrimaryExpr TIMES MultExpr 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(16/*MultExpr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MultExpr ::= PrimaryExpr 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(16/*MultExpr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expression ::= MultExpr MINUS Expression 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(15/*Expression*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expression ::= MultExpr PLUS Expression 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(15/*Expression*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expression ::= MultExpr 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(15/*Expression*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ReadStmt ::= READ LPAREN IDENTIFIER COMMA QUOTE RPAREN SEMI 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(14/*ReadStmt*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // WriteStmt ::= WRITE LPAREN Expression COMMA QUOTE RPAREN SEMI 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(13/*WriteStmt*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IfStmt ::= IF LPAREN BoolExpression RPAREN Statement ELSE Statement 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(12/*IfStmt*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IfStmt ::= IF LPAREN BoolExpression RPAREN Statement 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(12/*IfStmt*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ReturnStmt ::= RETURN Expression SEMI 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(11/*ReturnStmt*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // AssignStmt ::= IDENTIFIER CEQUAL Expression SEMI 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(10/*AssignStmt*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LocalVarDecl ::= Type IDENTIFIER SEMI 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(9/*LocalVarDecl*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Statement ::= ReadStmt 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Statement ::= WriteStmt 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Statement ::= IfStmt 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Statement ::= ReturnStmt 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Statement ::= AssignStmt 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Statement ::= LocalVarDecl 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Statement ::= Block 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Statements ::= Statement Statements 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(7/*Statements*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Statements ::= Statement 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(7/*Statements*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Block ::= BEGIN END 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(6/*Block*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Block ::= BEGIN Statements END 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(6/*Block*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= REAL 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(5/*Type*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= INT 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(5/*Type*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FormalParam ::= Type IDENTIFIER 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(4/*FormalParam*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FormalParams ::= FormalParam COMMA FormalParams 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(3/*FormalParams*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FormalParams ::= FormalParam 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(3/*FormalParams*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FormalParams ::= 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(3/*FormalParams*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MethodDecl ::= Type IDENTIFIER LPAREN FormalParams RPAREN Block 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(2/*MethodDecl*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MethodDecl ::= Type MAIN IDENTIFIER LPAREN FormalParams RPAREN Block 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(2/*MethodDecl*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= MethodDecl Program 
            {
              Integer RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).value;
		 RESULT=e+1; 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).right;
		Integer start_val = (Integer)((java_cup.runtime.Symbol) CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).value;
		RESULT = start_val;
              CUP$A3Parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$A3Parser$parser.done_parsing();
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= MethodDecl 
            {
              Integer RESULT = null;
		 RESULT = 1; 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

